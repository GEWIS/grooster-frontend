/* tslint:disable */
/* eslint-disable */
/**
 * GRooster
 * A GEWIS Rooster maker
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface GormDeletedAt
 */
export interface GormDeletedAt {
    /**
     * 
     * @type {string}
     * @memberof GormDeletedAt
     */
    'time'?: string;
    /**
     * Valid is true if Time is not NULL
     * @type {boolean}
     * @memberof GormDeletedAt
     */
    'valid'?: boolean;
}
/**
 * An organ that users can be part of.
 * @export
 * @interface ModelsOrgan
 */
export interface ModelsOrgan {
    /**
     * 
     * @type {string}
     * @memberof ModelsOrgan
     */
    'createdAt'?: string;
    /**
     * 
     * @type {GormDeletedAt}
     * @memberof ModelsOrgan
     */
    'deletedAt'?: GormDeletedAt;
    /**
     * 
     * @type {number}
     * @memberof ModelsOrgan
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsOrgan
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsOrgan
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {Array<User>}
     * @memberof ModelsOrgan
     */
    'users'?: Array<User>;
}
/**
 * 
 * @export
 * @interface Roster
 */
export interface Roster {
    /**
     * 
     * @type {string}
     * @memberof Roster
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Roster
     */
    'date'?: string;
    /**
     * 
     * @type {GormDeletedAt}
     * @memberof Roster
     */
    'deletedAt'?: GormDeletedAt;
    /**
     * 
     * @type {number}
     * @memberof Roster
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Roster
     */
    'name'?: string;
    /**
     * 
     * @type {Organ}
     * @memberof Roster
     */
    'organ'?: Organ;
    /**
     * 
     * @type {number}
     * @memberof Roster
     */
    'organId'?: number;
    /**
     * 
     * @type {Array<RosterAnswer>}
     * @memberof Roster
     */
    'rosterAnswer'?: Array<RosterAnswer>;
    /**
     * 
     * @type {Array<RosterShift>}
     * @memberof Roster
     */
    'rosterShift'?: Array<RosterShift>;
    /**
     * 
     * @type {boolean}
     * @memberof Roster
     */
    'saved'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Roster
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Roster
     */
    'values'?: Array<string>;
}
/**
 * 
 * @export
 * @interface RosterAnswer
 */
export interface RosterAnswer {
    /**
     * 
     * @type {string}
     * @memberof RosterAnswer
     */
    'createdAt'?: string;
    /**
     * 
     * @type {GormDeletedAt}
     * @memberof RosterAnswer
     */
    'deletedAt'?: GormDeletedAt;
    /**
     * 
     * @type {number}
     * @memberof RosterAnswer
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof RosterAnswer
     */
    'rosterId'?: number;
    /**
     * 
     * @type {number}
     * @memberof RosterAnswer
     */
    'rosterShiftId'?: number;
    /**
     * 
     * @type {string}
     * @memberof RosterAnswer
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof RosterAnswer
     */
    'userId'?: number;
    /**
     * 
     * @type {string}
     * @memberof RosterAnswer
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface RosterAnswerCreateRequest
 */
export interface RosterAnswerCreateRequest {
    /**
     * 
     * @type {number}
     * @memberof RosterAnswerCreateRequest
     */
    'rosterId'?: number;
    /**
     * 
     * @type {number}
     * @memberof RosterAnswerCreateRequest
     */
    'rosterShiftId'?: number;
    /**
     * 
     * @type {number}
     * @memberof RosterAnswerCreateRequest
     */
    'userId'?: number;
    /**
     * 
     * @type {string}
     * @memberof RosterAnswerCreateRequest
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface RosterAnswerUpdateRequest
 */
export interface RosterAnswerUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof RosterAnswerUpdateRequest
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface RosterCreateRequest
 */
export interface RosterCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof RosterCreateRequest
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof RosterCreateRequest
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof RosterCreateRequest
     */
    'organId'?: number;
}
/**
 * 
 * @export
 * @interface RosterShift
 */
export interface RosterShift {
    /**
     * 
     * @type {string}
     * @memberof RosterShift
     */
    'createdAt'?: string;
    /**
     * 
     * @type {GormDeletedAt}
     * @memberof RosterShift
     */
    'deletedAt'?: GormDeletedAt;
    /**
     * 
     * @type {number}
     * @memberof RosterShift
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof RosterShift
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof RosterShift
     */
    'rosterId'?: number;
    /**
     * 
     * @type {string}
     * @memberof RosterShift
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface RosterShiftCreateRequest
 */
export interface RosterShiftCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof RosterShiftCreateRequest
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof RosterShiftCreateRequest
     */
    'rosterId'?: number;
}
/**
 * 
 * @export
 * @interface RosterUpdateRequest
 */
export interface RosterUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof RosterUpdateRequest
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof RosterUpdateRequest
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface SavedShift
 */
export interface SavedShift {
    /**
     * 
     * @type {string}
     * @memberof SavedShift
     */
    'createdAt'?: string;
    /**
     * 
     * @type {GormDeletedAt}
     * @memberof SavedShift
     */
    'deletedAt'?: GormDeletedAt;
    /**
     * 
     * @type {number}
     * @memberof SavedShift
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof SavedShift
     */
    'rosterId'?: number;
    /**
     * 
     * @type {RosterShift}
     * @memberof SavedShift
     */
    'rosterShift'?: RosterShift;
    /**
     * 
     * @type {number}
     * @memberof SavedShift
     */
    'rosterShiftId'?: number;
    /**
     * 
     * @type {string}
     * @memberof SavedShift
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {Array<User>}
     * @memberof SavedShift
     */
    'users'?: Array<User>;
}
/**
 * 
 * @export
 * @interface SavedShiftUpdateRequest
 */
export interface SavedShiftUpdateRequest {
    /**
     * 
     * @type {Array<number>}
     * @memberof SavedShiftUpdateRequest
     */
    'users'?: Array<number>;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'createdAt'?: string;
    /**
     * 
     * @type {GormDeletedAt}
     * @memberof User
     */
    'deletedAt'?: GormDeletedAt;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'gewis_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'name'?: string;
    /**
     * 
     * @type {Array<ModelsOrgan>}
     * @memberof User
     */
    'organs'?: Array<ModelsOrgan>;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface UserCreateRequest
 */
export interface UserCreateRequest {
    /**
     * 
     * @type {number}
     * @memberof UserCreateRequest
     */
    'gewisid'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserCreateRequest
     */
    'name'?: string;
    /**
     * 
     * @type {Array<Organ>}
     * @memberof UserCreateRequest
     */
    'organs'?: Array<Organ>;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Validates state, exchanges code for token, and returns user info
         * @summary Handle OAuth2 Callback
         * @param {string} state State returned from provider
         * @param {string} code Authorization code from provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authCallbackGet: async (state: string, code: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'state' is not null or undefined
            assertParamExists('authCallbackGet', 'state', state)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('authCallbackGet', 'code', code)
            const localVarPath = `/auth/callback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generates state, sets a cookie, and redirects to Google OIDC
         * @summary Redirect to OIDC provider
         * @param {string} state State returned from provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRedirectGet: async (state: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'state' is not null or undefined
            assertParamExists('authRedirectGet', 'state', state)
            const localVarPath = `/auth/redirect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * Validates state, exchanges code for token, and returns user info
         * @summary Handle OAuth2 Callback
         * @param {string} state State returned from provider
         * @param {string} code Authorization code from provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authCallbackGet(state: string, code: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authCallbackGet(state, code, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authCallbackGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generates state, sets a cookie, and redirects to Google OIDC
         * @summary Redirect to OIDC provider
         * @param {string} state State returned from provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRedirectGet(state: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authRedirectGet(state, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authRedirectGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * Validates state, exchanges code for token, and returns user info
         * @summary Handle OAuth2 Callback
         * @param {string} state State returned from provider
         * @param {string} code Authorization code from provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authCallbackGet(state: string, code: string, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.authCallbackGet(state, code, options).then((request) => request(axios, basePath));
        },
        /**
         * Generates state, sets a cookie, and redirects to Google OIDC
         * @summary Redirect to OIDC provider
         * @param {string} state State returned from provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRedirectGet(state: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.authRedirectGet(state, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * Validates state, exchanges code for token, and returns user info
     * @summary Handle OAuth2 Callback
     * @param {string} state State returned from provider
     * @param {string} code Authorization code from provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authCallbackGet(state: string, code: string, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authCallbackGet(state, code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generates state, sets a cookie, and redirects to Google OIDC
     * @summary Redirect to OIDC provider
     * @param {string} state State returned from provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authRedirectGet(state: string, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authRedirectGet(state, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RosterApi - axios parameter creator
 * @export
 */
export const RosterApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary CreateRoster a new roster
         * @param {RosterCreateRequest} createParams Roster input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoster: async (createParams: RosterCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createParams' is not null or undefined
            assertParamExists('createRoster', 'createParams', createParams)
            const localVarPath = `/roster`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DeleteRoster a roster
         * @param {number} id Roster ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoster: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRoster', 'id', id)
            const localVarPath = `/roster/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a specific roster by id
         * @param {number} id Roster ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoster: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRoster', 'id', id)
            const localVarPath = `/roster/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all rosters or query by date and organ
         * @param {string} [date] Date filter (ISO format)
         * @param {number} [organId] Organ ID filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRosters: async (date?: string, organId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/roster`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (date !== undefined) {
                localVarQueryParameter['date'] = date;
            }

            if (organId !== undefined) {
                localVarQueryParameter['organId'] = organId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a roster
         * @param {number} id Roster ID
         * @param {RosterUpdateRequest} updateParams Roster input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoster: async (id: number, updateParams: RosterUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateRoster', 'id', id)
            // verify required parameter 'updateParams' is not null or undefined
            assertParamExists('updateRoster', 'updateParams', updateParams)
            const localVarPath = `/roster/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RosterApi - functional programming interface
 * @export
 */
export const RosterApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RosterApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary CreateRoster a new roster
         * @param {RosterCreateRequest} createParams Roster input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRoster(createParams: RosterCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Roster>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRoster(createParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RosterApi.createRoster']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary DeleteRoster a roster
         * @param {number} id Roster ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRoster(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRoster(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RosterApi.deleteRoster']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a specific roster by id
         * @param {number} id Roster ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoster(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Roster>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoster(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RosterApi.getRoster']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all rosters or query by date and organ
         * @param {string} [date] Date filter (ISO format)
         * @param {number} [organId] Organ ID filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRosters(date?: string, organId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Roster>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRosters(date, organId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RosterApi.getRosters']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a roster
         * @param {number} id Roster ID
         * @param {RosterUpdateRequest} updateParams Roster input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRoster(id: number, updateParams: RosterUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Roster>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRoster(id, updateParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RosterApi.updateRoster']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RosterApi - factory interface
 * @export
 */
export const RosterApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RosterApiFp(configuration)
    return {
        /**
         * 
         * @summary CreateRoster a new roster
         * @param {RosterCreateRequest} createParams Roster input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoster(createParams: RosterCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Roster> {
            return localVarFp.createRoster(createParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DeleteRoster a roster
         * @param {number} id Roster ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoster(id: number, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.deleteRoster(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a specific roster by id
         * @param {number} id Roster ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoster(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Roster> {
            return localVarFp.getRoster(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all rosters or query by date and organ
         * @param {string} [date] Date filter (ISO format)
         * @param {number} [organId] Organ ID filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRosters(date?: string, organId?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<Roster>> {
            return localVarFp.getRosters(date, organId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a roster
         * @param {number} id Roster ID
         * @param {RosterUpdateRequest} updateParams Roster input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoster(id: number, updateParams: RosterUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Roster> {
            return localVarFp.updateRoster(id, updateParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RosterApi - object-oriented interface
 * @export
 * @class RosterApi
 * @extends {BaseAPI}
 */
export class RosterApi extends BaseAPI {
    /**
     * 
     * @summary CreateRoster a new roster
     * @param {RosterCreateRequest} createParams Roster input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosterApi
     */
    public createRoster(createParams: RosterCreateRequest, options?: RawAxiosRequestConfig) {
        return RosterApiFp(this.configuration).createRoster(createParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DeleteRoster a roster
     * @param {number} id Roster ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosterApi
     */
    public deleteRoster(id: number, options?: RawAxiosRequestConfig) {
        return RosterApiFp(this.configuration).deleteRoster(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a specific roster by id
     * @param {number} id Roster ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosterApi
     */
    public getRoster(id: number, options?: RawAxiosRequestConfig) {
        return RosterApiFp(this.configuration).getRoster(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all rosters or query by date and organ
     * @param {string} [date] Date filter (ISO format)
     * @param {number} [organId] Organ ID filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosterApi
     */
    public getRosters(date?: string, organId?: number, options?: RawAxiosRequestConfig) {
        return RosterApiFp(this.configuration).getRosters(date, organId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a roster
     * @param {number} id Roster ID
     * @param {RosterUpdateRequest} updateParams Roster input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosterApi
     */
    public updateRoster(id: number, updateParams: RosterUpdateRequest, options?: RawAxiosRequestConfig) {
        return RosterApiFp(this.configuration).updateRoster(id, updateParams, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RosterAnswerApi - axios parameter creator
 * @export
 */
export const RosterAnswerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new roster shift answer
         * @param {RosterAnswerCreateRequest} createParams Roster answer input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRosterAnswer: async (createParams: RosterAnswerCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createParams' is not null or undefined
            assertParamExists('createRosterAnswer', 'createParams', createParams)
            const localVarPath = `/roster/answer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates a roster answer with the new value
         * @param {number} id Roster Answer ID
         * @param {RosterAnswerUpdateRequest} updateParams New answer value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRosterAnswer: async (id: number, updateParams: RosterAnswerUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateRosterAnswer', 'id', id)
            // verify required parameter 'updateParams' is not null or undefined
            assertParamExists('updateRosterAnswer', 'updateParams', updateParams)
            const localVarPath = `/roster/answer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RosterAnswerApi - functional programming interface
 * @export
 */
export const RosterAnswerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RosterAnswerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new roster shift answer
         * @param {RosterAnswerCreateRequest} createParams Roster answer input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRosterAnswer(createParams: RosterAnswerCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RosterAnswer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRosterAnswer(createParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RosterAnswerApi.createRosterAnswer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Updates a roster answer with the new value
         * @param {number} id Roster Answer ID
         * @param {RosterAnswerUpdateRequest} updateParams New answer value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRosterAnswer(id: number, updateParams: RosterAnswerUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RosterAnswer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRosterAnswer(id, updateParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RosterAnswerApi.updateRosterAnswer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RosterAnswerApi - factory interface
 * @export
 */
export const RosterAnswerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RosterAnswerApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new roster shift answer
         * @param {RosterAnswerCreateRequest} createParams Roster answer input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRosterAnswer(createParams: RosterAnswerCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<RosterAnswer> {
            return localVarFp.createRosterAnswer(createParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Updates a roster answer with the new value
         * @param {number} id Roster Answer ID
         * @param {RosterAnswerUpdateRequest} updateParams New answer value
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRosterAnswer(id: number, updateParams: RosterAnswerUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<RosterAnswer> {
            return localVarFp.updateRosterAnswer(id, updateParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RosterAnswerApi - object-oriented interface
 * @export
 * @class RosterAnswerApi
 * @extends {BaseAPI}
 */
export class RosterAnswerApi extends BaseAPI {
    /**
     * 
     * @summary Create a new roster shift answer
     * @param {RosterAnswerCreateRequest} createParams Roster answer input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosterAnswerApi
     */
    public createRosterAnswer(createParams: RosterAnswerCreateRequest, options?: RawAxiosRequestConfig) {
        return RosterAnswerApiFp(this.configuration).createRosterAnswer(createParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Updates a roster answer with the new value
     * @param {number} id Roster Answer ID
     * @param {RosterAnswerUpdateRequest} updateParams New answer value
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosterAnswerApi
     */
    public updateRosterAnswer(id: number, updateParams: RosterAnswerUpdateRequest, options?: RawAxiosRequestConfig) {
        return RosterAnswerApiFp(this.configuration).updateRosterAnswer(id, updateParams, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RosterShiftApi - axios parameter creator
 * @export
 */
export const RosterShiftApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new roster shift
         * @param {RosterShiftCreateRequest} createParams Roster shift input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRosterShift: async (createParams: RosterShiftCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createParams' is not null or undefined
            assertParamExists('createRosterShift', 'createParams', createParams)
            const localVarPath = `/roster/shift`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a roster shift
         * @param {number} id Roster Answer ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRosterShift: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRosterShift', 'id', id)
            const localVarPath = `/roster/shift/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RosterShiftApi - functional programming interface
 * @export
 */
export const RosterShiftApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RosterShiftApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new roster shift
         * @param {RosterShiftCreateRequest} createParams Roster shift input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRosterShift(createParams: RosterShiftCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RosterShift>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRosterShift(createParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RosterShiftApi.createRosterShift']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Deletes a roster shift
         * @param {number} id Roster Answer ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRosterShift(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRosterShift(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RosterShiftApi.deleteRosterShift']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RosterShiftApi - factory interface
 * @export
 */
export const RosterShiftApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RosterShiftApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new roster shift
         * @param {RosterShiftCreateRequest} createParams Roster shift input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRosterShift(createParams: RosterShiftCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<RosterShift> {
            return localVarFp.createRosterShift(createParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a roster shift
         * @param {number} id Roster Answer ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRosterShift(id: number, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.deleteRosterShift(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RosterShiftApi - object-oriented interface
 * @export
 * @class RosterShiftApi
 * @extends {BaseAPI}
 */
export class RosterShiftApi extends BaseAPI {
    /**
     * 
     * @summary Create a new roster shift
     * @param {RosterShiftCreateRequest} createParams Roster shift input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosterShiftApi
     */
    public createRosterShift(createParams: RosterShiftCreateRequest, options?: RawAxiosRequestConfig) {
        return RosterShiftApiFp(this.configuration).createRosterShift(createParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a roster shift
     * @param {number} id Roster Answer ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RosterShiftApi
     */
    public deleteRosterShift(id: number, options?: RawAxiosRequestConfig) {
        return RosterShiftApiFp(this.configuration).deleteRosterShift(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SavedShiftApi - axios parameter creator
 * @export
 */
export const SavedShiftApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all saved shifts for a specific roster
         * @param {number} id Roster ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSavedRoster: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSavedRoster', 'id', id)
            const localVarPath = `/roster/saved-shift/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Save a specific roster
         * @param {number} id Roster ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rosterSave: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rosterSave', 'id', id)
            const localVarPath = `/roster/{id}/save`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a specific saved shift
         * @param {number} id SavedShift ID
         * @param {SavedShiftUpdateRequest} updateParams Update data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSavedShift: async (id: number, updateParams: SavedShiftUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateSavedShift', 'id', id)
            // verify required parameter 'updateParams' is not null or undefined
            assertParamExists('updateSavedShift', 'updateParams', updateParams)
            const localVarPath = `/roster/saved-shift/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SavedShiftApi - functional programming interface
 * @export
 */
export const SavedShiftApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SavedShiftApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all saved shifts for a specific roster
         * @param {number} id Roster ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSavedRoster(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SavedShift>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSavedRoster(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SavedShiftApi.getSavedRoster']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Save a specific roster
         * @param {number} id Roster ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rosterSave(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rosterSave(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SavedShiftApi.rosterSave']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update a specific saved shift
         * @param {number} id SavedShift ID
         * @param {SavedShiftUpdateRequest} updateParams Update data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSavedShift(id: number, updateParams: SavedShiftUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SavedShift>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSavedShift(id, updateParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SavedShiftApi.updateSavedShift']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SavedShiftApi - factory interface
 * @export
 */
export const SavedShiftApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SavedShiftApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all saved shifts for a specific roster
         * @param {number} id Roster ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSavedRoster(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<SavedShift>> {
            return localVarFp.getSavedRoster(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Save a specific roster
         * @param {number} id Roster ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rosterSave(id: number, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.rosterSave(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a specific saved shift
         * @param {number} id SavedShift ID
         * @param {SavedShiftUpdateRequest} updateParams Update data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSavedShift(id: number, updateParams: SavedShiftUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<SavedShift> {
            return localVarFp.updateSavedShift(id, updateParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SavedShiftApi - object-oriented interface
 * @export
 * @class SavedShiftApi
 * @extends {BaseAPI}
 */
export class SavedShiftApi extends BaseAPI {
    /**
     * 
     * @summary Get all saved shifts for a specific roster
     * @param {number} id Roster ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SavedShiftApi
     */
    public getSavedRoster(id: number, options?: RawAxiosRequestConfig) {
        return SavedShiftApiFp(this.configuration).getSavedRoster(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Save a specific roster
     * @param {number} id Roster ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SavedShiftApi
     */
    public rosterSave(id: number, options?: RawAxiosRequestConfig) {
        return SavedShiftApiFp(this.configuration).rosterSave(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a specific saved shift
     * @param {number} id SavedShift ID
     * @param {SavedShiftUpdateRequest} updateParams Update data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SavedShiftApi
     */
    public updateSavedShift(id: number, updateParams: SavedShiftUpdateRequest, options?: RawAxiosRequestConfig) {
        return SavedShiftApiFp(this.configuration).updateSavedShift(id, updateParams, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * create user
         * @summary CreateRoster a new user
         * @param {UserCreateRequest} createParams User input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCreatePost: async (createParams: UserCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createParams' is not null or undefined
            assertParamExists('userCreatePost', 'createParams', createParams)
            const localVarPath = `/user/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of users with optional query parameter filtering
         * @summary Get all users with optional filtering
         * @param {number} [organId] Organ ID
         * @param {number} [gewisId] GEWIS ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGet: async (organId?: number, gewisId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (organId !== undefined) {
                localVarQueryParameter['organId'] = organId;
            }

            if (gewisId !== undefined) {
                localVarQueryParameter['gewisId'] = gewisId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DeleteRoster a user
         * @param {number} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userIdDelete', 'id', id)
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a specific user by their unique ID
         * @summary Get user by ID
         * @param {number} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userIdGet', 'id', id)
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * create user
         * @summary CreateRoster a new user
         * @param {UserCreateRequest} createParams User input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userCreatePost(createParams: UserCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userCreatePost(createParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userCreatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of users with optional query parameter filtering
         * @summary Get all users with optional filtering
         * @param {number} [organId] Organ ID
         * @param {number} [gewisId] GEWIS ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userGet(organId?: number, gewisId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userGet(organId, gewisId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary DeleteRoster a user
         * @param {number} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a specific user by their unique ID
         * @summary Get user by ID
         * @param {number} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * create user
         * @summary CreateRoster a new user
         * @param {UserCreateRequest} createParams User input
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCreatePost(createParams: UserCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.userCreatePost(createParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of users with optional query parameter filtering
         * @summary Get all users with optional filtering
         * @param {number} [organId] Organ ID
         * @param {number} [gewisId] GEWIS ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGet(organId?: number, gewisId?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<User>> {
            return localVarFp.userGet(organId, gewisId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DeleteRoster a user
         * @param {number} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userIdDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.userIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a specific user by their unique ID
         * @summary Get user by ID
         * @param {number} id User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.userIdGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * create user
     * @summary CreateRoster a new user
     * @param {UserCreateRequest} createParams User input
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userCreatePost(createParams: UserCreateRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userCreatePost(createParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of users with optional query parameter filtering
     * @summary Get all users with optional filtering
     * @param {number} [organId] Organ ID
     * @param {number} [gewisId] GEWIS ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userGet(organId?: number, gewisId?: number, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userGet(organId, gewisId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DeleteRoster a user
     * @param {number} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a specific user by their unique ID
     * @summary Get user by ID
     * @param {number} id User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userIdGet(id: number, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}



